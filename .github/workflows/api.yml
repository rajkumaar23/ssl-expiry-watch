name: api

on:
  push:
    branches: ["main", "revived"]
    paths-ignore:
      - 'web/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: log in to ghcr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: build and push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64/v8,linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:main
          cache-to: type=inline
  
  deploy:
    name: "deploy to pi"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: configure ssh
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/priv.key
          chmod 600 ~/.ssh/priv.key
          cat >>~/.ssh/config <<END
          Host pi
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/priv.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}

      - name: init db
        run: |
          ssh -t pi << EOF
            cd ${{ secrets.APP_DIR }}
            git pull
            cd ${{ secrets.APP_DIR }}/k8s/db
            kubectl apply -f namespace.yaml
            kubectl delete secret db-password -n tls-watch-db --ignore-not-found
            kubectl create secret generic db-password -n tls-watch-db --from-literal root-password="${{ secrets.DB_PASSWORD }}"
            kubectl delete configmap db-config -n tls-watch-db --ignore-not-found
            kubectl create configmap db-config -n tls-watch-db --from-literal db-name="${{ vars.DB_NAME }}"
            kubectl apply -f pvc.yaml
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml
          EOF